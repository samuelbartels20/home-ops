logging {
  level    = "warn"
  format   = "json"
  write_to = [loki.write.default.receiver]
}

discovery.kubernetes "pod" {
  role = "pod"
}

discovery.relabel "kepler_logs" {
  targets = discovery.kubernetes.pod.targets

  // Select only Kepler pod logs
  rule {
    source_labels = ["__meta_kubernetes_pod_label_app"]
    regex         = "kepler"
    action        = "keep"
  }

  rule {
    source_labels = ["__meta_kubernetes_namespace"]
    action        = "replace"
    target_label  = "namespace"
  }

  rule {
    source_labels = ["__meta_kubernetes_pod_name"]
    action        = "replace"
    target_label  = "pod"
  }

  rule {
    source_labels = ["__meta_kubernetes_pod_container_name"]
    action        = "replace"
    target_label  = "container"
  }

  rule {
    source_labels = ["__meta_kubernetes_pod_container_name"]
    action        = "replace"
    target_label  = "job"
  }

  rule {
    source_labels = ["__meta_kubernetes_pod_uid", "__meta_kubernetes_pod_container_name"]
    action        = "replace"
    target_label  = "__path__"
    separator     = "/"
    replacement   = "/var/log/pods/*$1/*.log"
  }
}

loki.source.kubernetes "kepler_logs" {
  targets    = discovery.relabel.kepler_logs.output
  forward_to = [loki.process.kepler.receiver]
}

loki.process "kepler" {
  stage.static_labels {
    values = {
      cluster = "kubernetes"
      job     = "kepler"
      app     = "kepler"
    }
  }

  stage.labeldrop {
    values = ["filename", "stream"]
  }

  forward_to = [loki.write.default.receiver]
}

////////////////////////////////////////////////////////////////////////////////
// Existing cluster-wide log configuration (unchanged)
////////////////////////////////////////////////////////////////////////////////

discovery.relabel "pod_logs" {
  targets = discovery.kubernetes.pod.targets

  rule {
    source_labels = ["__meta_kubernetes_namespace"]
    action = "replace"
    target_label = "namespace"
  }

  rule {
    source_labels = ["__meta_kubernetes_pod_name"]
    action = "replace"
    target_label = "pod"
  }

  rule {
    source_labels = ["__meta_kubernetes_pod_container_name"]
    action = "replace"
    target_label = "container"
  }

  rule {
    source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_name"]
    action = "replace"
    target_label = "app"
  }

  rule {
    source_labels = ["__meta_kubernetes_namespace", "__meta_kubernetes_pod_container_name"]
    action = "replace"
    target_label = "job"
    separator = "/"
    replacement = "$1"
  }

  rule {
    source_labels = ["__meta_kubernetes_pod_uid", "__meta_kubernetes_pod_container_name"]
    action = "replace"
    target_label = "__path__"
    separator = "/"
    replacement = "/var/log/pods/*$1/*.log"
  }

  rule {
    source_labels = ["__meta_kubernetes_pod_container_id"]
    action = "replace"
    target_label = "container_runtime"
    regex = "^(\\S+):\\/\\/.+$"
    replacement = "$1"
  }
}

loki.source.kubernetes "pod_logs" {
  targets    = discovery.relabel.pod_logs.output
  forward_to = [loki.process.pod_logs.receiver]
}

loki.process "pod_logs" {
  stage.static_labels {
    values = {
      cluster = "kubernetes",
    }
  }

  forward_to = [loki.write.default.receiver]
}

loki.source.kubernetes_events "cluster_events" {
  job_name   = "integrations/kubernetes/eventhandler"
  log_format = "logfmt"
  forward_to = [
    loki.process.cluster_events.receiver,
  ]
}

loki.process "cluster_events" {
  forward_to = [loki.write.default.receiver]

  stage.static_labels {
    values = {
      cluster = "kubernetes",
    }
  }

  stage.labels {
    values = {
      kubernetes_cluster_events = "job",
    }
  }
}

loki.write "default" {
  endpoint {
    url = "http://loki-headless.observability.svc.cluster.local:3100/loki/api/v1/push"
  }
}
